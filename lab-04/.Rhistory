knitr::opts_chunk$set(echo = TRUE)
# load necessary packages
library(tidyverse)
library(ggplot2)
library(skimr)
# load the rental listing data, it may take a while because its size
rental <- read_csv("rental_data_wa.csv")
rental <- rental %>%
filter(DATE_POSTED >= as.Date("2019-01-01") &
DATE_POSTED <= as.Date("2023-12-31"))
# check the data dimension
dim(rental)
knitr::opts_chunk$set(echo = TRUE)
# load necessary packages
library(tidyverse)
library(ggplot2)
library(skimr)
# load the rental listing data, it may take a while because its size
rental <- read_csv("rental_data_wa.csv")
rental <- rental %>%
filter(DATE_POSTED >= as.Date("2019-01-01") &
DATE_POSTED <= as.Date("2023-12-31"))
# check the data dimension
dim(rental)
# skim the whole dataset
# skim(rental)
rental_apt <- rental %>%
filter(BUILDING_TYPE == "apartment building") %>%
mutate(
# converts posting date into the first day of its month for monthly analysis
month = as.Date(paste0(format(as.Date(DATE_POSTED), "%Y-%m"), "-01")),
# categorizes apartments by the number of bedrooms
bed_group = case_when(
BEDS == 0 ~ "Studio",
BEDS == 1 ~ "1 Bedroom",
BEDS == 2 ~ "2 Bedrooms",
BEDS >= 3 ~ "3+ Bedrooms",
TRUE ~ "Unknown"),
# creates a variable counting how many of six amenities each listing offers
amenities_sum = (
(CLUBHOUSE == "Y") +
(GRANITE == "Y") +
(STAINLESS == "Y") +
(POOL == "Y") +
(GYM == "Y") +
(DOORMAN == "Y")),
# groups apartments into Low / Medium / High quality levels
quality_group = case_when(
amenities_sum <= 1 ~ "Low Quality",
amenities_sum %in% 2:4 ~ "Medium Quality",
amenities_sum >= 5 ~ "High Quality",
TRUE ~ "Unknown"
),
# convert two variables from categorical to ordinal
bed_group = factor(bed_group,
levels = c("Studio", "1 Bedroom", "2 Bedrooms", "3+ Bedrooms")),
quality_group = factor(quality_group,
levels = c("Low Quality", "Medium Quality", "High Quality"))
)
apt_rent_by_month <- rental_apt %>%
# group by three variables: month, quality_group, bed_group
group_by(month, quality_group, bed_group) %>%
dplyr::summarise(mean_rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "keep")
ggplot(apt_rent_by_month, aes(x = month, y = mean_rent, color = quality_group)) +
geom_line() +
facet_wrap(~bed_group)+
labs(
title = "Monthly Apartment Rent Trend 2019–2023",
x = "Time",
y = "Average Rent Price",
color = "Quality Levels of Apartment"
) +
theme_minimal() +
theme(legend.position = "bottom")
apt_rent_rel <- apt_rent_by_month %>%
# compute relative change within each group
group_by(quality_group, bed_group) %>%
mutate(
# rent in Dec 2019 as baseline
base_rent = mean_rent[month == as.Date("2019-12-01")],
# rent change (e.g., +10%)
rent_change = (mean_rent - base_rent)/base_rent
) %>%
ungroup()
g <- ggplot(
filter(apt_rent_rel, month >= as.Date("2019-12-01") & month <= as.Date("2022-12-01")),
aes(x = month, y = rent_change, color = quality_group)
) +
geom_line(linewidth = 1) +
facet_wrap(~bed_group, nrow = 1) +
labs(
title = "Washington State Monthly Apartment Rent Changes Since Covid-19",
subtitle = "Apartment Rent Compared to December 2019 by Quality Levels and Number of Bedroom. Data Source: RentHub, 2019-2022",
x = "Time",
y = "Relative Rent Change",
color = "Quality Levels of Apartment"
)
g
g_line_rec <- g +
# add a horizontal line across the plot at y = 0
geom_hline(yintercept = 0, linewidth = 0.6) +
annotate("rect", # a rectangular
# we need 4 points to determine the location
xmin = as.Date("2020-01-01"), xmax = as.Date("2021-07-01"),
ymin = 0, ymax = 0.5,
fill = "#e37d5a", alpha = 0.05) + # explain below
annotate("text", # some texts
# we need 1 points to determine the location
x = as.Date("2020-10-01"),
y = 0.35,
label = "Pandemic\nPeriod",
color = "gray40",
size = 2.5,
fontface = "italic") # explain below
g_line_rec
# colors()
# scale_color_brewer(palette = "Set2")
# scale_color_viridis_d(option = "plasma")
g_scale <- g_line_rec +
# change how assigns colors to the variable quality_group
# use rocket palette style within viridis family
# direction = -1 reverses the order of the palette
scale_color_viridis_d(option = "rocket", direction = -1) +
# where to place tick marks on the x-axis
scale_x_date(
breaks = as.Date(c("2019-12-01", "2020-12-01", "2021-12-01","2022-12-01")),
labels = c("2019-12", "2020-12", "2021-12", "2022-12")
) +
# formats the numeric values into percentages with a plus or minus sign
scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75),
labels = function(x) sprintf("%+d%%", x * 100)
)
g_scale
g_coordinate <- g_scale +
# limits the y-axis to between −0.15 and 0.9
coord_cartesian(ylim = c(-0.15, 0.9))
g_coordinate
g_theme <- g_coordinate +
theme_minimal(base_family = "Helvetica", base_size = 12) +
theme(
# ---------------- for the whole plot ----------------
text = element_text(lineheight = 1.1), # set line height for all text
plot.title = element_text(face = "bold", size = 18), # make title bold and large
plot.margin = margin(10, 20, 10, 20), # external margins (top, right, bottom, left)
# ---------------- for x and y axis ----------------
axis.title.x = element_blank(), # remove axis.title.x
axis.title.y = element_blank(),
axis.ticks.x = element_line(linewidth = 0.4), # style tick marks
axis.ticks.y = element_line(linewidth = 0.4),
# ---------------- for grid and panel ----------------
panel.grid = element_blank(), # remove the entire grid lines
panel.spacing.x = unit(1.6, "lines"), # spacing between facets horizontally
# ---------------- for the legend ----------------
legend.position = "bottom", # place legend below the plot
legend.title = element_text(size = 10, face = "bold"),
# ---------------- for facet ----------------
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", # facet labels
size = 14,
margin = margin(t = 25)) # top margin (t/r/b/l)
)
g_theme
ggplot(
filter(apt_rent_rel, month >= as.Date("2019-12-01") & month <= as.Date("2022-12-01")),
aes(x = month, y = rent_change, color = quality_group)
) +
# 1️⃣ geometry
geom_hline(yintercept = 0, linewidth = 0.6) +
annotate("rect",
xmin = as.Date("2020-01-01"), xmax = as.Date("2021-07-01"),
ymin = 0, ymax = 0.5,
fill = "#e37d5a", alpha = 0.05) +
annotate("text",
x = as.Date("2020-10-01"),
y = 0.35,
label = "Pandemic\nPeriod",
color = "gray40", size = 2.5, fontface = "italic") +
geom_line(linewidth = 1) +
# 2️⃣ scale
scale_color_viridis_d(option = "rocket", direction = -1) +
scale_x_date(
breaks = as.Date(c("2019-12-01", "2020-12-01", "2021-12-01","2022-12-01")),
labels = c("2019-12", "2020-12", "2021-12", "2022-12")
) +
scale_y_continuous(
labels = function(x) sprintf("%+d%%", x * 100),
breaks = c(-0.25, 0, 0.25, 0.5, 0.75, 1.0)
) +
# 3️⃣ facet and coordinate system
facet_wrap(~bed_group, nrow = 1) +
coord_cartesian(clip = "off", ylim = c(-0.15, 0.9)) +
# 4️⃣ labels
labs(
title = "Washington State Monthly Apartment Rent Changes Since Covid-19",
subtitle = "Apartment Rent Compared to December 2019 by Quality Levels and Number of Bedroom. Data Source: RentHub, 2019-2022",
x = "Time",
y = "Relative Rent Change",
color = "Quality Levels of Apartment"
) +
# 5️⃣ theme
theme_minimal(base_family = "Helvetica", base_size = 12) +
theme(
text = element_text(lineheight = 1.1),
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_blank(),
axis.ticks.x = element_line(linewidth = 0.4),
axis.ticks.y = element_line(linewidth = 0.4),
axis.title.y = element_blank(),
legend.position = "bottom",
legend.title = element_text(size = 10, face = "bold"),
panel.grid = element_blank(),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 14, margin = margin(t = 25)),
panel.spacing.x = unit(1.6, "lines"),
plot.margin = margin(10, 20, 10, 20)
)
# save it as 14 inch * 7 inch
ggsave("rent_change_plot.png", width = 14, height = 7, dpi = 200)
# save it as 7 inch * 3.5 inch
ggsave("rent_change_plot_735.png", width = 7, height = 3.5, dpi = 200)
# Apartment Map: King County, WA (Dec 2021 – Jan 2022)
# Load required libraries
# tidyverse: data manipulation (dplyr, tidyr) and ggplot2
# ggplot2: plotting
# ggrepel: for non-overlapping text labels
# sf: handling spatial data
# ggspatial: adding scale bars and north arrows
# tigris: downloading US geographic shapefiles
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(sf)
library(ggspatial)
library(tigris)
options(tigris_use_cache = TRUE)  # Cache shapefiles for faster loading
# Data preparation
rental_map <- rental_apt %>%
drop_na(LATITUDE, LONGITUDE, RENT_PRICE) %>%  # Remove listings missing coordinates or rent
filter(DATE_POSTED >= as.Date("2021-12-01") & DATE_POSTED <= as.Date("2022-01-31")) %>%  # Only include Dec 2021 – Jan 2022
mutate(
POOL = toupper(as.character(POOL)),  # Normalize pool info to uppercase "Y"/"N"
amenity_symbol = ifelse(POOL == "Y", "P", "")  # Symbol for labeling apartments with pools
)
´
knitr::opts_chunk$set(echo = TRUE)
